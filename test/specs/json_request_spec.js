// Generated by CoffeeScript 1.4.0
(function() {

  describe("jQuery.jsonRequest", function() {
    var jsonResponse, modalFlash, onComplete, onFailure, onSuccess, request, requestUrl;
    request = onSuccess = onFailure = onComplete = jsonResponse = requestUrl = modalFlash = null;
    beforeEach(function() {
      spyOn(window, 'jsonr_redirect');
      spyOn(window, 'jsonr_render_flash_messages');
      jasmine.Ajax.useMock();
      onSuccess = jasmine.createSpy('onSuccess');
      onFailure = jasmine.createSpy('onFailure');
      onComplete = jasmine.createSpy('onComplete');
      requestUrl = '/admin/preorders/1/edit';
      return modalFlash = false;
    });
    describe("options, settings, arguments, inputs", function() {
      describe("with a url string as the first and only argument", function() {
        beforeEach(function() {
          $.jsonRequest(requestUrl);
          return request = mostRecentAjaxRequest();
        });
        it("should perform an ajax 'GET'", function() {
          return expect(request.method).toEqual('GET');
        });
        it("should request the url provided", function() {
          return expect(request.url).toEqual(requestUrl);
        });
        return it("accepts json content-type by default", function() {
          return expect(request.requestHeaders['Accept']).toMatch(/json/);
        });
      });
      describe("with a settings object as the first and only argument", function() {
        requestUrl = '/admin/preorders/1/edit';
        it("should perform an ajax 'GET' request on the url provided", function() {
          $.jsonRequest({
            url: requestUrl
          });
          request = mostRecentAjaxRequest();
          expect(request.method).toEqual('GET');
          return expect(request.url).toEqual(requestUrl);
        });
        it("should honor the method 'type' option", function() {
          $.jsonRequest({
            url: requestUrl,
            type: 'POST'
          });
          request = mostRecentAjaxRequest();
          expect(request.method).toEqual('POST');
          return expect(request.url).toEqual(requestUrl);
        });
        it("accepts json content-type by default", function() {
          $.jsonRequest({
            url: requestUrl
          });
          request = mostRecentAjaxRequest();
          return expect(request.requestHeaders['Accept']).toMatch(/json/);
        });
        it("honors the 'dataType' option to set the Accept header", function() {
          $.jsonRequest({
            url: requestUrl,
            dataType: 'script'
          });
          request = mostRecentAjaxRequest();
          return expect(request.requestHeaders['Accept']).not.toMatch(/json/);
        });
        return it("should be able to POST some form data", function() {
          var settings;
          settings = {
            type: 'post',
            url: '/admin/profiles/294/update_profile',
            data: 'utf8=%E2%9C%93&_method=put&authenticity_token=P4k997MAUXOcmz5bfXTN8xCj6DPXS1El5L348yQmZ8M%3D&user%5Bfirstname%5D=Jenny&user%5Blastname%5D=Calcara&user%5Bemail%5D=jenny.calcara%40loomislabs.com'
          };
          $.jsonRequest(settings);
          request = mostRecentAjaxRequest();
          expect(request.method).toEqual(settings.type.toUpperCase());
          expect(request.url).toEqual(settings.url);
          return expect(request.params).toEqual(settings.data);
        });
      });
      return describe("with a url string and settings as two arguments", function() {
        requestUrl = '/admin/preorders/1/edit';
        it("should perform an ajax request of given type on the url provided", function() {
          $.jsonRequest(requestUrl, {
            type: 'POST',
            url: '/another/url'
          });
          request = mostRecentAjaxRequest();
          expect(request.method).toEqual('POST');
          return expect(request.url).toEqual(requestUrl);
        });
        return xit("should ignore arguments and always request the same data type", function() {
          $.jsonRequest(requestUrl, {
            dataType: 'script'
          });
          request = mostRecentAjaxRequest();
          return expect(request.requestHeaders['Accept']).toContain('application/json');
        });
      });
    });
    return describe("responses", function() {
      beforeEach(function() {
        $.jsonRequest('/admin/preorders/1/edit', {
          success: onSuccess,
          error: onFailure,
          complete: onComplete,
          modalFlash: modalFlash
        });
        return request = mostRecentAjaxRequest();
      });
      afterEach(function() {});
      it("should be defined", function() {
        return expect($.jsonRequest).toBeDefined();
      });
      describe("on success", function() {
        beforeEach(function() {
          request.response(Mocks.general.success);
          return jsonResponse = JSON.parse(request.responseText);
        });
        it("should execute given success callback", function() {
          return expect(onSuccess).toHaveBeenCalled();
        });
        it("shouldn't execute any error callback", function() {
          return expect(onFailure).not.toHaveBeenCalled();
        });
        it("shouldn't attempt to redirect", function() {
          return expect(jsonr_redirect).not.toHaveBeenCalled();
        });
        it("should execute callback assigned to options.complete", function() {
          return expect(onComplete).toHaveBeenCalled();
        });
        return xit("should be able to fire an array of onComplete callbacks", function() {
          var onCompleteAgain;
          onCompleteAgain = jasmine.createSpy('onCompleteAgain');
          $.jsonRequest({
            url: requestUrl,
            complete: [onCompleteAgain, onCompleteAgain, onCompleteAgain]
          });
          request = mostRecentAjaxRequest();
          request.response(Mocks.general.success);
          return expect(onCompleteAgain.callCount).toEqual(3);
        });
      });
      describe("on success with flash", function() {
        beforeEach(function() {
          return request.response(Mocks.general.success_flash);
        });
        return it("should render flash message(s) when present", function() {
          jsonResponse = JSON.parse(request.responseText);
          return expect(jsonr_render_flash_messages).toHaveBeenCalledWith(jsonResponse.flash, modalFlash);
        });
      });
      describe("on success with redirect", function() {
        beforeEach(function() {
          request.response(Mocks.general.success_redirect);
          return jsonResponse = JSON.parse(request.responseText);
        });
        it("should follow redirect url in response when present", function() {
          return expect(jsonr_redirect).toHaveBeenCalledWith(jsonResponse.redirect);
        });
        return it("shouldn't execute any error callback", function() {
          return expect(onFailure).not.toHaveBeenCalled();
        });
      });
      describe("on error", function() {
        beforeEach(function() {
          request.response(Mocks.general.error);
          return jsonResponse = JSON.parse(request.responseText);
        });
        it("should execute given error callback", function() {
          return expect(onFailure).toHaveBeenCalled();
        });
        it("should flash an error message", function() {
          return expect(jsonr_render_flash_messages).toHaveBeenCalled();
        });
        it("shouldn't execute given success callback", function() {
          return expect(onSuccess).not.toHaveBeenCalled();
        });
        it("should exec a callback provided to options.complete", function() {
          return expect(onComplete).toHaveBeenCalled();
        });
        return it("shouldn't attempt to redirect", function() {
          return expect(jsonr_redirect).not.toHaveBeenCalled();
        });
      });
      describe("on error with flash", function() {
        beforeEach(function() {
          return request.response(Mocks.general.error_flash);
        });
        return it("should render flash message(s) when present", function() {
          jsonResponse = JSON.parse(request.responseText);
          return expect(window.jsonr_render_flash_messages).toHaveBeenCalledWith(jsonResponse.flash, modalFlash);
        });
      });
      return describe("on error with redirect", function() {
        beforeEach(function() {
          request.response(Mocks.general.error_redirect);
          return jsonResponse = JSON.parse(request.responseText);
        });
        it("should follow redirect url in response", function() {
          return expect(jsonr_redirect).toHaveBeenCalledWith(jsonResponse.redirect);
        });
        return it("shouldn't execute success callback", function() {
          return expect(onSuccess).not.toHaveBeenCalled();
        });
      });
    });
  });

}).call(this);
