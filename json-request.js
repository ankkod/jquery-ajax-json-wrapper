// Generated by CoffeeScript 1.4.0

/*
# simple wrapper around jquery.ajax()
# designed to handle a custom JSON response format from server,
# formatted like so:
# {
#   redirect: "/some/url/string" | null
#   status:   "ok" | "form-error" | "invalid-session" | "unprocessable-entity"
#   data:     { #json data obj }
#   html:     "<!-- escaped html string -->"
#   flash:    { ["notice" | "alert"] : "message to show" }
# }
*/


(function() {
  var $, _ref, _ref1;

  $ = window.jQuery;

  $.jsonRequest = function(url, options) {
    var cbComplete, cbError, cbSuccess, default_options, jsonResponse, parseResponse, _performRedirect;
    if (typeof url === 'object') {
      options = url;
      url = options.url;
    }
    default_options = {
      type: 'GET',
      dataType: 'json',
      modalFlash: false
    };
    if (options == null) {
      options = {};
    }
    options.url = url;
    options = $.extend(default_options, options);
    jsonResponse = null;
    cbSuccess = options.success || function(jsonResponse) {
      return debug.info("jsonRequest success:", jsonResponse);
    };
    cbError = options.error || function(jsonResponse, jqXHR, textStatus) {
      return debug.warn("jsonRequest error: + " + textStatus, jsonResponse, jqXHR);
    };
    cbComplete = options.complete || function(jsonResponse) {};
    options.success = function(data, textStatus, jqXHR) {
      jsonResponse = parseResponse(jqXHR);
      return cbSuccess(jsonResponse);
    };
    options.error = function(jqXHR, textStatus) {
      jsonResponse = parseResponse(jqXHR);
      jsonr_render_flash_messages({
        error: "Error: " + textStatus
      });
      return cbError(jsonResponse, jqXHR, textStatus);
    };
    options.complete = function(jqXHR, textStatus) {
      if (jsonResponse != null) {
        if (jsonResponse.flash != null) {
          jsonr_render_flash_messages(jsonResponse.flash, options.modalFlash);
        }
        return cbComplete(jsonResponse);
      }
    };
    parseResponse = function(jqXHR) {
      var content_type;
      jsonResponse = {};
      content_type = jqXHR.getResponseHeader('content-type');
      if (content_type.match(/json/)) {
        try {
          jsonResponse = $.parseJSON(jqXHR.responseText);
          _performRedirect(jsonResponse);
        } catch (error) {
          debug.error("non-standard json response received");
        }
      } else if (content_type.match(/javascript/)) {
        jsonResponse = jqXHR.responseText;
      } else if (content_type.match(/html/)) {
        jsonResponse = {
          html: jqXHR.responseText
        };
      } else {
        debug.error("non-standard xhr response received of type: " + content_type);
      }
      return jsonResponse;
    };
    _performRedirect = function(jsonResponse) {
      var redirect;
      redirect = jsonResponse.redirect;
      if (redirect != null ? redirect.length : void 0) {
        window.jsonr_redirect(redirect);
        return true;
      } else {
        return false;
      }
    };
    return $.ajax(options);
  };

  if ((_ref = window.jsonr_redirect) == null) {
    window.jsonr_redirect = function(url) {
      return window.location.href = url;
    };
  }

  /*
   Custom method to display notifications to the user
   Can be called in browser with a hash of flash messages
  
   The modal option will raise a modal alert (not done by default)
  
   for example:
  
     var flash_json = { "success": "Successfully updated records" }
     jsonr_render_flash_messages(flash_json);
  */


  if ((_ref1 = window.jsonr_render_flash_messages) == null) {
    window.jsonr_render_flash_messages = function(flash_json, modal) {
      var $flash_messages, key, klass, _results;
      if (modal == null) {
        modal = false;
      }
      $flash_messages = $('#flash_messages').length ? $('#flash_messages') : '<div id="flash_messages"/>';
      $flash_messages.html("");
      if (typeof flash_json === 'string') {
        flash_json = [flash_json];
      }
      _results = [];
      for (key in flash_json) {
        switch (key) {
          case 'notice':
          case 'success':
            klass = 'success';
            break;
          default:
            klass = 'error';
        }
        if (modal && klass === 'error') {
          _results.push(alert(flash_json[key]));
        } else {
          _results.push($flash_messages.append("<div class='alert alert-" + klass + "'><i></i>" + flash_json[key] + "</div>"));
        }
      }
      return _results;
    };
  }

}).call(this);
